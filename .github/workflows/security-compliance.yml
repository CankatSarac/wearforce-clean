name: Security and Compliance Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - code
          - containers
          - infrastructure
          - compliance

env:
  REGISTRY: ghcr.io
  SONAR_HOST_URL: https://sonarcloud.io

jobs:
  # Static Code Analysis
  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'all' || github.event_name != 'workflow_dispatch'
    
    strategy:
      matrix:
        language: [go, python, javascript, typescript]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup language environment
      uses: ./.github/actions/setup-language
      with:
        language: ${{ matrix.language }}
    
    # CodeQL Analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Auto-build CodeQL
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{ matrix.language }}"
    
    # Semgrep Security Scan
    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
        generateSarif: "1"
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/cwe-top-25
    
    - name: Upload Semgrep SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif
        category: semgrep-${{ matrix.language }}
    
    # Language-specific security scans
    - name: Go security scan (Gosec)
      if: matrix.language == 'go'
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out gosec-results.sarif -stdout -severity medium ./...
    
    - name: Upload Gosec results
      if: matrix.language == 'go'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-results.sarif
        category: gosec
    
    - name: Python security scan (Bandit)
      if: matrix.language == 'python'
      run: |
        pip install bandit[toml]
        bandit -r . -f sarif -o bandit-results.sarif || true
    
    - name: Upload Bandit results
      if: matrix.language == 'python'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: bandit-results.sarif
        category: bandit
    
    - name: JavaScript/TypeScript security scan (ESLint Security)
      if: matrix.language == 'javascript' || matrix.language == 'typescript'
      run: |
        npm install -g @microsoft/eslint-formatter-sarif eslint-plugin-security
        npx eslint --ext .js,.jsx,.ts,.tsx --format @microsoft/sarif --output-file eslint-security-results.sarif . || true
    
    - name: Upload ESLint Security results
      if: matrix.language == 'javascript' || matrix.language == 'typescript'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: eslint-security-results.sarif
        category: eslint-security

  # Container Security Scanning
  container-security-scan:
    name: Container Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == 'all' || github.event_name != 'workflow_dispatch'
    
    strategy:
      matrix:
        service: [gateway, llm-service, nlu-service, rag-service, stt-service, tts-service, crm-service, erp-service, graphql-service, notification-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build container image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile.${{ matrix.service }}
        tags: local/${{ matrix.service }}:security-scan
        load: true
        no-cache: true
    
    # Trivy Container Scan
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'local/${{ matrix.service }}:security-scan'
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-${{ matrix.service }}.sarif'
        category: 'trivy-${{ matrix.service }}'
    
    # Grype Container Scan
    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      id: grype-scan
      with:
        image: 'local/${{ matrix.service }}:security-scan'
        severity-cutoff: medium
        fail-build: false
        output-format: sarif
    
    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.grype-scan.outputs.sarif }}
        category: 'grype-${{ matrix.service }}'
    
    # Syft SBOM Generation
    - name: Generate SBOM with Syft
      uses: anchore/sbom-action@v0
      with:
        image: 'local/${{ matrix.service }}:security-scan'
        output-file: 'sbom-${{ matrix.service }}.spdx.json'
        format: spdx-json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ matrix.service }}
        path: 'sbom-${{ matrix.service }}.spdx.json'
    
    # Docker Scout (if available)
    - name: Docker Scout CVEs
      if: github.event_name == 'pull_request'
      uses: docker/scout-action@v1
      with:
        command: cves
        image: 'local/${{ matrix.service }}:security-scan'
        sarif-file: 'scout-${{ matrix.service }}.sarif'
    
    - name: Upload Docker Scout results
      if: github.event_name == 'pull_request'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'scout-${{ matrix.service }}.sarif'
        category: 'scout-${{ matrix.service }}'

  # Infrastructure Security Scanning
  infrastructure-security-scan:
    name: Infrastructure Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'infrastructure' || github.event.inputs.scan_type == 'all' || github.event_name != 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Terraform Security Scanning with Checkov
    - name: Run Checkov for Terraform
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infrastructure/terraform
        framework: terraform
        output_format: sarif
        output_file_path: checkov-terraform.sarif
        download_external_modules: true
    
    - name: Upload Checkov Terraform results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov-terraform.sarif
        category: checkov-terraform
    
    # Kubernetes Security Scanning
    - name: Run Checkov for Kubernetes
      uses: bridgecrewio/checkov-action@master
      with:
        directory: k8s
        framework: kubernetes
        output_format: sarif
        output_file_path: checkov-k8s.sarif
    
    - name: Upload Checkov Kubernetes results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov-k8s.sarif
        category: checkov-kubernetes
    
    # Dockerfile Security Scanning
    - name: Run Checkov for Dockerfile
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile
        output_format: sarif
        output_file_path: checkov-dockerfile.sarif
    
    - name: Upload Checkov Dockerfile results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov-dockerfile.sarif
        category: checkov-dockerfile
    
    # Terraform Plan Security Analysis
    - name: Setup Terraform
      if: github.event_name == 'pull_request'
      uses: hashicorp/setup-terraform@v3
    
    - name: Generate Terraform Plan
      if: github.event_name == 'pull_request'
      working-directory: infrastructure/terraform/environments/production
      run: |
        terraform init
        terraform plan -out=tfplan
        terraform show -json tfplan > tfplan.json
    
    - name: Run Terrascan on Terraform Plan
      if: github.event_name == 'pull_request'
      uses: tenable/terrascan-action@main
      with:
        iac_type: 'terraform'
        iac_version: 'v15'
        policy_type: 'aws'
        only_warn: true
        sarif_upload: true
        config_path: 'infrastructure/terraform/environments/production/tfplan.json'
    
    # Cloud Security Posture Management (CSPM)
    - name: Run Cloud Security Assessment
      if: github.ref == 'refs/heads/main'
      run: |
        # Install AWS CLI and configure
        pip install awscli
        
        # Run AWS Config rules assessment
        aws configservice get-compliance-summary-by-config-rule --region us-west-2 > config-compliance.json || echo "AWS Config not available"
        
        # Run AWS Security Hub findings
        aws securityhub get-findings --region us-west-2 --max-results 50 > securityhub-findings.json || echo "Security Hub not available"
    
    - name: Upload Cloud Security Assessment
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: cloud-security-assessment
        path: |
          config-compliance.json
          securityhub-findings.json

  # Dependency Security Scanning
  dependency-security-scan:
    name: Dependency Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event_name != 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # Go Dependency Scanning
    - name: Go Dependency Scan
      if: github.event_name == 'pull_request'
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
    
    # Nancy for Go dependencies
    - name: Nancy Go dependency scan
      run: |
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -m all | nancy sleuth --output-format=sarif > nancy-results.sarif || true
    
    - name: Upload Nancy results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: nancy-results.sarif
        category: nancy-go
    
    # Python Dependency Scanning
    - name: Python Safety scan
      run: |
        pip install safety
        safety check --json --output safety-results.json || true
        # Convert to SARIF format (custom script or tool)
    
    # NPM Audit
    - name: NPM Audit
      run: |
        cd clients/web && npm audit --audit-level moderate --format json > npm-audit.json || true
        cd ../mobile && npm audit --audit-level moderate --format json > npm-audit-mobile.json || true
    
    - name: Upload NPM Audit results
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-results
        path: |
          clients/web/npm-audit.json
          clients/mobile/npm-audit-mobile.json

  # Secrets Scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event_name != 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # TruffleHog for secret detection
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    # Gitleaks for secret detection
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
    
    # GitGuardian for enterprise secret detection
    - name: GitGuardian scan
      uses: GitGuardian/ggshield-action@v1
      env:
        GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
        GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
        GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
        GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  # Compliance Scanning
  compliance-scan:
    name: Compliance Assessment
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'compliance' || github.event.inputs.scan_type == 'all' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # GDPR Compliance Check
    - name: GDPR Compliance Scan
      run: |
        echo "Running GDPR compliance checks..."
        # Check for data processing documentation
        find . -name "*.md" -exec grep -l "GDPR\|privacy\|data protection" {} \;
        
        # Check for privacy policy references
        grep -r "privacy" --include="*.py" --include="*.go" --include="*.js" --include="*.ts" . || true
    
    # SOC 2 Compliance Check
    - name: SOC 2 Compliance Scan
      run: |
        echo "Running SOC 2 compliance checks..."
        # Check for logging and monitoring
        grep -r "audit" --include="*.py" --include="*.go" . || true
        grep -r "log" --include="*.py" --include="*.go" . || true
    
    # PCI DSS Compliance (if handling payments)
    - name: PCI DSS Compliance Scan
      run: |
        echo "Running PCI DSS compliance checks..."
        # Check for encryption implementations
        grep -r "encrypt\|AES\|RSA" --include="*.py" --include="*.go" . || true
    
    # CIS Benchmarks for Kubernetes
    - name: CIS Kubernetes Benchmark
      run: |
        # Install kube-bench
        curl -L https://github.com/aquasecurity/kube-bench/releases/latest/download/kube-bench_linux_amd64.tar.gz | tar xz
        
        # Run CIS benchmarks
        ./kube-bench --json > cis-benchmark-results.json || echo "Kube-bench requires cluster access"
    
    - name: Upload Compliance Results
      uses: actions/upload-artifact@v4
      with:
        name: compliance-results
        path: |
          cis-benchmark-results.json

  # License Compliance
  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Go license scanning
    - name: Go License Scanner
      run: |
        go install github.com/google/go-licenses@latest
        go-licenses report . > go-licenses.json || true
    
    # Python license scanning
    - name: Python License Scanner
      run: |
        pip install pip-licenses
        pip-licenses --format=json --output-file=python-licenses.json || true
    
    # NPM license scanning
    - name: NPM License Scanner
      run: |
        npm install -g license-checker
        cd clients/web && license-checker --json --out npm-licenses.json || true
        cd ../mobile && license-checker --json --out npm-licenses-mobile.json || true
    
    - name: Upload License Compliance Results
      uses: actions/upload-artifact@v4
      with:
        name: license-compliance
        path: |
          go-licenses.json
          python-licenses.json
          clients/web/npm-licenses.json
          clients/mobile/npm-licenses-mobile.json

  # Security Report Generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [code-security-scan, container-security-scan, infrastructure-security-scan, dependency-security-scan, secrets-scan, compliance-scan, license-compliance]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate Security Report
      run: |
        echo "# WearForce Security Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Summary" >> security-report.md
        echo "- **Code Security Scan**: ${{ needs.code-security-scan.result }}" >> security-report.md
        echo "- **Container Security Scan**: ${{ needs.container-security-scan.result }}" >> security-report.md
        echo "- **Infrastructure Security Scan**: ${{ needs.infrastructure-security-scan.result }}" >> security-report.md
        echo "- **Dependency Security Scan**: ${{ needs.dependency-security-scan.result }}" >> security-report.md
        echo "- **Secrets Scan**: ${{ needs.secrets-scan.result }}" >> security-report.md
        echo "- **Compliance Scan**: ${{ needs.compliance-scan.result }}" >> security-report.md
        echo "- **License Compliance**: ${{ needs.license-compliance.result }}" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Findings" >> security-report.md
        # Process SARIF files and generate summary
        for file in **/*.sarif; do
          if [ -f "$file" ]; then
            echo "- Found SARIF file: $file" >> security-report.md
          fi
        done
        
        echo "" >> security-report.md
        echo "## Recommendations" >> security-report.md
        echo "1. Review and remediate all CRITICAL and HIGH severity findings" >> security-report.md
        echo "2. Update dependencies with known vulnerabilities" >> security-report.md
        echo "3. Implement additional security controls as needed" >> security-report.md
        echo "4. Schedule regular security reviews and penetration testing" >> security-report.md
    
    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
    
    - name: Comment on PR with Security Summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '## 🛡️ Security Scan Results\n\n' + report
          });

  # Security notification
  security-notification:
    name: Security Alert Notification
    runs-on: ubuntu-latest
    needs: [security-report]
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
    
    steps:
    - name: Send Security Alert
      run: |
        echo "Critical security issues detected!"
        # Add notification logic (Slack, email, PagerDuty, etc.)
        
        # Example Slack notification
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🚨 Critical security vulnerabilities detected in WearForce repository. Please review immediately."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        fi