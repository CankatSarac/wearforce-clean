version: '3.8'

services:
  gateway:
    build: .
    ports:
      - "8080:8080"  # HTTP
      - "8081:8081"  # gRPC
      - "9090:9090"  # Metrics
    environment:
      - GATEWAY_REDIS_ADDRESS=redis:6379
      - GATEWAY_JWT_KEYCLOAK_BASE_URL=http://keycloak:8080
      - GATEWAY_JWT_KEYCLOAK_REALM=wearforce-clean
      - GATEWAY_JWT_KEYCLOAK_CLIENT_ID=wearforce-clean-gateway
      - GATEWAY_JWT_ISSUER=http://keycloak:8080/auth/realms/wearforce-clean
      - GATEWAY_JWT_AUDIENCE=wearforce-clean-gateway
      - GATEWAY_TRACING_ENABLED=true
      - GATEWAY_TRACING_EXPORTER_ENDPOINT=http://jaeger:14268/api/traces
      - GATEWAY_LOGGING_LEVEL=info
    depends_on:
      - redis
      - keycloak
    volumes:
      - ./configs:/app/configs
      - gateway_certs:/app/certs
      - gateway_logs:/app/logs
    networks:
      - wearforce-clean-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wearforce-clean-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin123
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak123
      - KC_HOSTNAME_STRICT=false
      - KC_HTTP_ENABLED=true
      - KC_METRICS_ENABLED=true
      - KC_HEALTH_ENABLED=true
      - KC_LOG_LEVEL=INFO
      - KC_CACHE=ispn
      - KC_CACHE_STACK=kubernetes
      - SERVICE_CLIENT_SECRET=wearforce-clean-services-secret-2025
    ports:
      - "8090:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./deployments/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
      - keycloak_data:/opt/keycloak/data
    networks:
      - wearforce-clean-network
    restart: unless-stopped
    command: 
      - start-dev
      - --import-realm
      - --features=device-flow,client-policies,declarative-user-profile,admin-fine-grained-authz
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=keycloak123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployments/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - wearforce-clean-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - wearforce-clean-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LLM Inference Service
  llm-service:
    build:
      context: ./ai-services
      dockerfile: llm-service/Dockerfile
    ports:
      - "8004:8004"
    environment:
      - SERVICE_NAME=llm-service
      - PORT=8004
      - DEBUG=false
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=wearforce-clean
      - DB_PASSWORD=wearforce-clean123
      - DB_NAME=wearforce-clean
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
      - TENSOR_PARALLEL_SIZE=1
      - MAX_NUM_SEQS=256
      - MAX_MODEL_LEN=4096
      - BATCH_SIZE=32
      - BATCH_TIMEOUT=0.1
    depends_on:
      - redis
      - postgres
    networks:
      - wearforce-clean-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # NLU/Agent Router Service
  nlu-service:
    build:
      context: ./ai-services
      dockerfile: nlu-service/Dockerfile
    ports:
      - "8003:8003"
    environment:
      - SERVICE_NAME=nlu-service
      - PORT=8003
      - DEBUG=false
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=wearforce-clean
      - DB_PASSWORD=wearforce-clean123
      - DB_NAME=wearforce-clean
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
      - MAX_CONVERSATION_HISTORY=50
      - CONVERSATION_TTL=3600
      - CRM_API_URL=http://gateway:8080/api/crm
      - ERP_API_URL=http://gateway:8080/api/erp
    depends_on:
      - redis
      - postgres
      - llm-service
    networks:
      - wearforce-clean-network
    restart: unless-stopped

  # RAG Pipeline Service  
  rag-service:
    build:
      context: ./ai-services
      dockerfile: rag-service/Dockerfile
    ports:
      - "8005:8005"
    environment:
      - SERVICE_NAME=rag-service
      - PORT=8005
      - DEBUG=false
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=wearforce-clean
      - DB_PASSWORD=wearforce-clean123
      - DB_NAME=wearforce-clean
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_COLLECTION=wearforce_clean_docs
      - EMBEDDING_DIM=384
      - LOG_LEVEL=INFO
      - CHUNK_SIZE=512
      - CHUNK_OVERLAP=50
      - TOP_K=5
      - SIMILARITY_THRESHOLD=0.7
      - DENSE_WEIGHT=0.7
      - SPARSE_WEIGHT=0.3
    depends_on:
      - redis
      - postgres
      - qdrant
    networks:
      - wearforce-clean-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9091:9090"
    volumes:
      - ./deployments/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - wearforce-clean-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployments/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - wearforce-clean-network
    restart: unless-stopped
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:1.48
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - wearforce-clean-network
    restart: unless-stopped

  # Open Policy Agent for authorization
  opa:
    image: openpolicyagent/opa:0.58.0-envoy
    ports:
      - "8181:8181"  # OPA API
      - "8182:8182"  # OPA Decision API
    command:
      - "run"
      - "--server"
      - "--config-file=/config/opa-config.yaml"
      - "--addr=0.0.0.0:8181"
      - "--diagnostic-addr=0.0.0.0:8182"
      - "/policies"
    volumes:
      - ./deployments/opa/config.yaml:/config/opa-config.yaml:ro
      - ./deployments/opa/policies:/policies:ro
    networks:
      - wearforce-clean-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployments/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployments/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - gateway
    networks:
      - wearforce-clean-network
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  keycloak_data:
  qdrant_data:
  prometheus_data:
  grafana_data:
  gateway_certs:
  gateway_logs:

networks:
  wearforce-clean-network:
    driver: bridge