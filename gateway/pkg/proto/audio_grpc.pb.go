// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: audio.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AudioStreamingService_BiDirectionalStream_FullMethodName = "/wearforce.gateway.v1.AudioStreamingService/BiDirectionalStream"
	AudioStreamingService_SpeechToText_FullMethodName        = "/wearforce.gateway.v1.AudioStreamingService/SpeechToText"
	AudioStreamingService_TextToSpeech_FullMethodName        = "/wearforce.gateway.v1.AudioStreamingService/TextToSpeech"
	AudioStreamingService_GetAudioConfig_FullMethodName      = "/wearforce.gateway.v1.AudioStreamingService/GetAudioConfig"
)

// AudioStreamingServiceClient is the client API for AudioStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AudioStreamingService provides bi-directional audio streaming for STT/TTS
type AudioStreamingServiceClient interface {
	// BiDirectionalStream handles both speech-to-text and text-to-speech
	BiDirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AudioRequest, AudioResponse], error)
	// SpeechToText converts audio to text
	SpeechToText(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SttRequest, SttResponse], error)
	// TextToSpeech converts text to audio
	TextToSpeech(ctx context.Context, in *TtsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TtsResponse], error)
	// GetAudioConfig returns supported audio configurations
	GetAudioConfig(ctx context.Context, in *AudioConfigRequest, opts ...grpc.CallOption) (*AudioConfigResponse, error)
}

type audioStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioStreamingServiceClient(cc grpc.ClientConnInterface) AudioStreamingServiceClient {
	return &audioStreamingServiceClient{cc}
}

func (c *audioStreamingServiceClient) BiDirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AudioRequest, AudioResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AudioStreamingService_ServiceDesc.Streams[0], AudioStreamingService_BiDirectionalStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AudioRequest, AudioResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AudioStreamingService_BiDirectionalStreamClient = grpc.BidiStreamingClient[AudioRequest, AudioResponse]

func (c *audioStreamingServiceClient) SpeechToText(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SttRequest, SttResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AudioStreamingService_ServiceDesc.Streams[1], AudioStreamingService_SpeechToText_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SttRequest, SttResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AudioStreamingService_SpeechToTextClient = grpc.BidiStreamingClient[SttRequest, SttResponse]

func (c *audioStreamingServiceClient) TextToSpeech(ctx context.Context, in *TtsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TtsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AudioStreamingService_ServiceDesc.Streams[2], AudioStreamingService_TextToSpeech_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TtsRequest, TtsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AudioStreamingService_TextToSpeechClient = grpc.ServerStreamingClient[TtsResponse]

func (c *audioStreamingServiceClient) GetAudioConfig(ctx context.Context, in *AudioConfigRequest, opts ...grpc.CallOption) (*AudioConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AudioConfigResponse)
	err := c.cc.Invoke(ctx, AudioStreamingService_GetAudioConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudioStreamingServiceServer is the server API for AudioStreamingService service.
// All implementations must embed UnimplementedAudioStreamingServiceServer
// for forward compatibility.
//
// AudioStreamingService provides bi-directional audio streaming for STT/TTS
type AudioStreamingServiceServer interface {
	// BiDirectionalStream handles both speech-to-text and text-to-speech
	BiDirectionalStream(grpc.BidiStreamingServer[AudioRequest, AudioResponse]) error
	// SpeechToText converts audio to text
	SpeechToText(grpc.BidiStreamingServer[SttRequest, SttResponse]) error
	// TextToSpeech converts text to audio
	TextToSpeech(*TtsRequest, grpc.ServerStreamingServer[TtsResponse]) error
	// GetAudioConfig returns supported audio configurations
	GetAudioConfig(context.Context, *AudioConfigRequest) (*AudioConfigResponse, error)
	mustEmbedUnimplementedAudioStreamingServiceServer()
}

// UnimplementedAudioStreamingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAudioStreamingServiceServer struct{}

func (UnimplementedAudioStreamingServiceServer) BiDirectionalStream(grpc.BidiStreamingServer[AudioRequest, AudioResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BiDirectionalStream not implemented")
}
func (UnimplementedAudioStreamingServiceServer) SpeechToText(grpc.BidiStreamingServer[SttRequest, SttResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SpeechToText not implemented")
}
func (UnimplementedAudioStreamingServiceServer) TextToSpeech(*TtsRequest, grpc.ServerStreamingServer[TtsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method TextToSpeech not implemented")
}
func (UnimplementedAudioStreamingServiceServer) GetAudioConfig(context.Context, *AudioConfigRequest) (*AudioConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudioConfig not implemented")
}
func (UnimplementedAudioStreamingServiceServer) mustEmbedUnimplementedAudioStreamingServiceServer() {}
func (UnimplementedAudioStreamingServiceServer) testEmbeddedByValue()                               {}

// UnsafeAudioStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioStreamingServiceServer will
// result in compilation errors.
type UnsafeAudioStreamingServiceServer interface {
	mustEmbedUnimplementedAudioStreamingServiceServer()
}

func RegisterAudioStreamingServiceServer(s grpc.ServiceRegistrar, srv AudioStreamingServiceServer) {
	// If the following call pancis, it indicates UnimplementedAudioStreamingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AudioStreamingService_ServiceDesc, srv)
}

func _AudioStreamingService_BiDirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AudioStreamingServiceServer).BiDirectionalStream(&grpc.GenericServerStream[AudioRequest, AudioResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AudioStreamingService_BiDirectionalStreamServer = grpc.BidiStreamingServer[AudioRequest, AudioResponse]

func _AudioStreamingService_SpeechToText_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AudioStreamingServiceServer).SpeechToText(&grpc.GenericServerStream[SttRequest, SttResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AudioStreamingService_SpeechToTextServer = grpc.BidiStreamingServer[SttRequest, SttResponse]

func _AudioStreamingService_TextToSpeech_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TtsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AudioStreamingServiceServer).TextToSpeech(m, &grpc.GenericServerStream[TtsRequest, TtsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AudioStreamingService_TextToSpeechServer = grpc.ServerStreamingServer[TtsResponse]

func _AudioStreamingService_GetAudioConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioStreamingServiceServer).GetAudioConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AudioStreamingService_GetAudioConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioStreamingServiceServer).GetAudioConfig(ctx, req.(*AudioConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AudioStreamingService_ServiceDesc is the grpc.ServiceDesc for AudioStreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioStreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wearforce.gateway.v1.AudioStreamingService",
	HandlerType: (*AudioStreamingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAudioConfig",
			Handler:    _AudioStreamingService_GetAudioConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BiDirectionalStream",
			Handler:       _AudioStreamingService_BiDirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SpeechToText",
			Handler:       _AudioStreamingService_SpeechToText_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TextToSpeech",
			Handler:       _AudioStreamingService_TextToSpeech_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "audio.proto",
}
