// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GatewayService_HealthCheck_FullMethodName      = "/wearforce.gateway.v1.GatewayService/HealthCheck"
	GatewayService_GetServiceStatus_FullMethodName = "/wearforce.gateway.v1.GatewayService/GetServiceStatus"
	GatewayService_ForwardRequest_FullMethodName   = "/wearforce.gateway.v1.GatewayService/ForwardRequest"
	GatewayService_BatchForward_FullMethodName     = "/wearforce.gateway.v1.GatewayService/BatchForward"
)

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GatewayService provides core gateway functionality
type GatewayServiceClient interface {
	// Health check endpoint
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Get service status and metrics
	GetServiceStatus(ctx context.Context, in *ServiceStatusRequest, opts ...grpc.CallOption) (*ServiceStatusResponse, error)
	// Forward request to backend services
	ForwardRequest(ctx context.Context, in *ForwardRequestData, opts ...grpc.CallOption) (*ForwardResponseData, error)
	// Batch forward multiple requests
	BatchForward(ctx context.Context, in *BatchForwardRequest, opts ...grpc.CallOption) (*BatchForwardResponse, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, GatewayService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetServiceStatus(ctx context.Context, in *ServiceStatusRequest, opts ...grpc.CallOption) (*ServiceStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceStatusResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetServiceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ForwardRequest(ctx context.Context, in *ForwardRequestData, opts ...grpc.CallOption) (*ForwardResponseData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardResponseData)
	err := c.cc.Invoke(ctx, GatewayService_ForwardRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) BatchForward(ctx context.Context, in *BatchForwardRequest, opts ...grpc.CallOption) (*BatchForwardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchForwardResponse)
	err := c.cc.Invoke(ctx, GatewayService_BatchForward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations must embed UnimplementedGatewayServiceServer
// for forward compatibility.
//
// GatewayService provides core gateway functionality
type GatewayServiceServer interface {
	// Health check endpoint
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Get service status and metrics
	GetServiceStatus(context.Context, *ServiceStatusRequest) (*ServiceStatusResponse, error)
	// Forward request to backend services
	ForwardRequest(context.Context, *ForwardRequestData) (*ForwardResponseData, error)
	// Batch forward multiple requests
	BatchForward(context.Context, *BatchForwardRequest) (*BatchForwardResponse, error)
	mustEmbedUnimplementedGatewayServiceServer()
}

// UnimplementedGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServiceServer struct{}

func (UnimplementedGatewayServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedGatewayServiceServer) GetServiceStatus(context.Context, *ServiceStatusRequest) (*ServiceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStatus not implemented")
}
func (UnimplementedGatewayServiceServer) ForwardRequest(context.Context, *ForwardRequestData) (*ForwardResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardRequest not implemented")
}
func (UnimplementedGatewayServiceServer) BatchForward(context.Context, *BatchForwardRequest) (*BatchForwardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchForward not implemented")
}
func (UnimplementedGatewayServiceServer) mustEmbedUnimplementedGatewayServiceServer() {}
func (UnimplementedGatewayServiceServer) testEmbeddedByValue()                        {}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetServiceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetServiceStatus(ctx, req.(*ServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ForwardRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ForwardRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ForwardRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ForwardRequest(ctx, req.(*ForwardRequestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_BatchForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).BatchForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_BatchForward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).BatchForward(ctx, req.(*BatchForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wearforce.gateway.v1.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _GatewayService_HealthCheck_Handler,
		},
		{
			MethodName: "GetServiceStatus",
			Handler:    _GatewayService_GetServiceStatus_Handler,
		},
		{
			MethodName: "ForwardRequest",
			Handler:    _GatewayService_ForwardRequest_Handler,
		},
		{
			MethodName: "BatchForward",
			Handler:    _GatewayService_BatchForward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

const (
	ServiceProxyService_ForwardToCRM_FullMethodName          = "/wearforce.gateway.v1.ServiceProxyService/ForwardToCRM"
	ServiceProxyService_ForwardToERP_FullMethodName          = "/wearforce.gateway.v1.ServiceProxyService/ForwardToERP"
	ServiceProxyService_ForwardToSTT_FullMethodName          = "/wearforce.gateway.v1.ServiceProxyService/ForwardToSTT"
	ServiceProxyService_ForwardToTTS_FullMethodName          = "/wearforce.gateway.v1.ServiceProxyService/ForwardToTTS"
	ServiceProxyService_ForwardToUser_FullMethodName         = "/wearforce.gateway.v1.ServiceProxyService/ForwardToUser"
	ServiceProxyService_ForwardToNotification_FullMethodName = "/wearforce.gateway.v1.ServiceProxyService/ForwardToNotification"
)

// ServiceProxyServiceClient is the client API for ServiceProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ServiceProxyService handles routing to backend services
type ServiceProxyServiceClient interface {
	// Forward to CRM service
	ForwardToCRM(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error)
	// Forward to ERP service
	ForwardToERP(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error)
	// Forward to STT service
	ForwardToSTT(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error)
	// Forward to TTS service
	ForwardToTTS(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error)
	// Forward to User service
	ForwardToUser(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error)
	// Forward to Notification service
	ForwardToNotification(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error)
}

type serviceProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceProxyServiceClient(cc grpc.ClientConnInterface) ServiceProxyServiceClient {
	return &serviceProxyServiceClient{cc}
}

func (c *serviceProxyServiceClient) ForwardToCRM(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProxyResponse)
	err := c.cc.Invoke(ctx, ServiceProxyService_ForwardToCRM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProxyServiceClient) ForwardToERP(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProxyResponse)
	err := c.cc.Invoke(ctx, ServiceProxyService_ForwardToERP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProxyServiceClient) ForwardToSTT(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProxyResponse)
	err := c.cc.Invoke(ctx, ServiceProxyService_ForwardToSTT_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProxyServiceClient) ForwardToTTS(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProxyResponse)
	err := c.cc.Invoke(ctx, ServiceProxyService_ForwardToTTS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProxyServiceClient) ForwardToUser(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProxyResponse)
	err := c.cc.Invoke(ctx, ServiceProxyService_ForwardToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProxyServiceClient) ForwardToNotification(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProxyResponse)
	err := c.cc.Invoke(ctx, ServiceProxyService_ForwardToNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceProxyServiceServer is the server API for ServiceProxyService service.
// All implementations must embed UnimplementedServiceProxyServiceServer
// for forward compatibility.
//
// ServiceProxyService handles routing to backend services
type ServiceProxyServiceServer interface {
	// Forward to CRM service
	ForwardToCRM(context.Context, *ProxyRequest) (*ProxyResponse, error)
	// Forward to ERP service
	ForwardToERP(context.Context, *ProxyRequest) (*ProxyResponse, error)
	// Forward to STT service
	ForwardToSTT(context.Context, *ProxyRequest) (*ProxyResponse, error)
	// Forward to TTS service
	ForwardToTTS(context.Context, *ProxyRequest) (*ProxyResponse, error)
	// Forward to User service
	ForwardToUser(context.Context, *ProxyRequest) (*ProxyResponse, error)
	// Forward to Notification service
	ForwardToNotification(context.Context, *ProxyRequest) (*ProxyResponse, error)
	mustEmbedUnimplementedServiceProxyServiceServer()
}

// UnimplementedServiceProxyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceProxyServiceServer struct{}

func (UnimplementedServiceProxyServiceServer) ForwardToCRM(context.Context, *ProxyRequest) (*ProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardToCRM not implemented")
}
func (UnimplementedServiceProxyServiceServer) ForwardToERP(context.Context, *ProxyRequest) (*ProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardToERP not implemented")
}
func (UnimplementedServiceProxyServiceServer) ForwardToSTT(context.Context, *ProxyRequest) (*ProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardToSTT not implemented")
}
func (UnimplementedServiceProxyServiceServer) ForwardToTTS(context.Context, *ProxyRequest) (*ProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardToTTS not implemented")
}
func (UnimplementedServiceProxyServiceServer) ForwardToUser(context.Context, *ProxyRequest) (*ProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardToUser not implemented")
}
func (UnimplementedServiceProxyServiceServer) ForwardToNotification(context.Context, *ProxyRequest) (*ProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardToNotification not implemented")
}
func (UnimplementedServiceProxyServiceServer) mustEmbedUnimplementedServiceProxyServiceServer() {}
func (UnimplementedServiceProxyServiceServer) testEmbeddedByValue()                             {}

// UnsafeServiceProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceProxyServiceServer will
// result in compilation errors.
type UnsafeServiceProxyServiceServer interface {
	mustEmbedUnimplementedServiceProxyServiceServer()
}

func RegisterServiceProxyServiceServer(s grpc.ServiceRegistrar, srv ServiceProxyServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceProxyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceProxyService_ServiceDesc, srv)
}

func _ServiceProxyService_ForwardToCRM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProxyServiceServer).ForwardToCRM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProxyService_ForwardToCRM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProxyServiceServer).ForwardToCRM(ctx, req.(*ProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProxyService_ForwardToERP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProxyServiceServer).ForwardToERP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProxyService_ForwardToERP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProxyServiceServer).ForwardToERP(ctx, req.(*ProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProxyService_ForwardToSTT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProxyServiceServer).ForwardToSTT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProxyService_ForwardToSTT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProxyServiceServer).ForwardToSTT(ctx, req.(*ProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProxyService_ForwardToTTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProxyServiceServer).ForwardToTTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProxyService_ForwardToTTS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProxyServiceServer).ForwardToTTS(ctx, req.(*ProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProxyService_ForwardToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProxyServiceServer).ForwardToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProxyService_ForwardToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProxyServiceServer).ForwardToUser(ctx, req.(*ProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProxyService_ForwardToNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProxyServiceServer).ForwardToNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProxyService_ForwardToNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProxyServiceServer).ForwardToNotification(ctx, req.(*ProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceProxyService_ServiceDesc is the grpc.ServiceDesc for ServiceProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wearforce.gateway.v1.ServiceProxyService",
	HandlerType: (*ServiceProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardToCRM",
			Handler:    _ServiceProxyService_ForwardToCRM_Handler,
		},
		{
			MethodName: "ForwardToERP",
			Handler:    _ServiceProxyService_ForwardToERP_Handler,
		},
		{
			MethodName: "ForwardToSTT",
			Handler:    _ServiceProxyService_ForwardToSTT_Handler,
		},
		{
			MethodName: "ForwardToTTS",
			Handler:    _ServiceProxyService_ForwardToTTS_Handler,
		},
		{
			MethodName: "ForwardToUser",
			Handler:    _ServiceProxyService_ForwardToUser_Handler,
		},
		{
			MethodName: "ForwardToNotification",
			Handler:    _ServiceProxyService_ForwardToNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
