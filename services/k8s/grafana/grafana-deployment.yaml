apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
  labels:
    app: grafana
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus:9090
      access: proxy
      isDefault: true
      editable: true
      jsonData:
        timeInterval: "30s"
        queryTimeout: "60s"
        httpMethod: "POST"
    - name: Loki
      type: loki
      url: http://loki:3100
      access: proxy
      isDefault: false
      editable: true
    - name: Jaeger
      type: jaeger
      url: http://jaeger-query:16686
      access: proxy
      isDefault: false
      editable: true
    - name: AlertManager
      type: alertmanager
      url: http://alertmanager:9093
      access: proxy
      isDefault: false
      editable: true
      jsonData:
        implementation: "prometheus"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
  labels:
    app: grafana
data:
  grafana.ini: |
    [analytics]
    check_for_updates = false
    
    [grafana_net]
    url = https://grafana.net
    
    [log]
    mode = console
    level = info
    
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    
    [server]
    http_port = 3000
    domain = grafana.wearforce-clean.com
    root_url = https://grafana.wearforce-clean.com
    serve_from_sub_path = false
    
    [database]
    type = postgres
    host = postgres:5432
    name = grafana
    user = grafana
    password = grafana_password
    ssl_mode = require
    
    [session]
    provider = redis
    provider_config = addr=redis:6379,pool_size=100,prefix=grafana:session:
    
    [security]
    admin_user = admin
    admin_password = wearforce-clean_admin_password
    secret_key = wearforce-clean_grafana_secret_key
    disable_gravatar = true
    cookie_secure = true
    cookie_samesite = strict
    
    [snapshots]
    external_enabled = false
    
    [dashboards]
    default_home_dashboard_path = /var/lib/grafana/dashboards/wearforce-clean-overview.json
    
    [auth]
    disable_login_form = false
    oauth_auto_login = false
    
    [auth.basic]
    enabled = true
    
    [auth.oauth]
    name = OAuth
    enabled = false
    
    [smtp]
    enabled = true
    host = smtp.gmail.com:587
    user = alerts@wearforce-clean.com
    password = smtp_password
    from_address = alerts@wearforce-clean.com
    from_name = WearForce Monitoring
    
    [alerting]
    enabled = true
    execute_alerts = true
    
    [metrics]
    enabled = true
    interval_seconds = 30
    
    [feature_toggles]
    enable = ngalert
    
    [unified_alerting]
    enabled = true
    ha_peers = grafana:9094
    ha_listen_address = 0.0.0.0:9094
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      securityContext:
        fsGroup: 472
        runAsUser: 472
        runAsNonRoot: true
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        ports:
        - containerPort: 3000
          name: grafana
        - containerPort: 9094
          name: ha-cluster
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin
              key: password
        - name: GF_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-db
              key: password
        - name: GF_SECURITY_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: secret-key
        - name: GF_SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-smtp
              key: password
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
          readOnly: true
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
          readOnly: true
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
          readOnly: true
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
          readOnly: true
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: monitoring
  labels:
    app: grafana
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  type: ClusterIP
  ports:
  - name: grafana
    port: 3000
    targetPort: 3000
    protocol: TCP
  - name: ha-cluster
    port: 9094
    targetPort: 9094
    protocol: TCP
  selector:
    app: grafana
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana
  namespace: monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - grafana.wearforce-clean.com
    secretName: grafana-tls
  rules:
  - host: grafana.wearforce-clean.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin
  namespace: monitoring
type: Opaque
data:
  password: d2VhcmZvcmNlX2FkbWluX3Bhc3N3b3Jk # base64 encoded: wearforce-clean_admin_password
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-db
  namespace: monitoring
type: Opaque
data:
  password: Z3JhZmFuYV9wYXNzd29yZA== # base64 encoded: grafana_password
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: monitoring
type: Opaque
data:
  secret-key: d2VhcmZvcmNlX2dyYWZhbmFfc2VjcmV0X2tleQ== # base64 encoded: wearforce-clean_grafana_secret_key
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-smtp
  namespace: monitoring
type: Opaque
data:
  password: c210cF9wYXNzd29yZA== # base64 encoded: smtp_password