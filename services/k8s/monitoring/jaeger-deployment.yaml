apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-all-in-one
  namespace: monitoring
  labels:
    app: jaeger
    component: all-in-one
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
      component: all-in-one
  template:
    metadata:
      labels:
        app: jaeger
        component: all-in-one
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "14269"
    spec:
      containers:
      - name: jaeger-all-in-one
        image: jaegertracing/all-in-one:1.50
        args:
          - "--memory.max-traces=50000"
          - "--query.base-path=/jaeger/ui"
          - "--prometheus.server-url=http://prometheus:9090"
          - "--prometheus.query.support-spanmetrics-connector=true"
          - "--prometheus.query.normalize-calls=true"
          - "--prometheus.query.normalize-duration=true"
        env:
        - name: COLLECTOR_ZIPKIN_HOST_PORT
          value: ":9411"
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        - name: METRICS_STORAGE_TYPE
          value: "prometheus"
        - name: PROMETHEUS_SERVER_URL
          value: "http://prometheus:9090"
        - name: PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR
          value: "true"
        ports:
        - containerPort: 5775
          protocol: UDP
          name: zk-compact-trft
        - containerPort: 6831
          protocol: UDP
          name: jg-compact-trft
        - containerPort: 6832
          protocol: UDP
          name: jg-binary-trft
        - containerPort: 5778
          protocol: TCP
          name: config-rest
        - containerPort: 16686
          protocol: TCP
          name: query
        - containerPort: 14268
          protocol: TCP
          name: jaeger-collector
        - containerPort: 14250
          protocol: TCP
          name: grpc
        - containerPort: 9411
          protocol: TCP
          name: zipkin
        - containerPort: 4317
          protocol: TCP
          name: otlp-grpc
        - containerPort: 4318
          protocol: TCP
          name: otlp-http
        - containerPort: 14269
          protocol: TCP
          name: admin
        livenessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 5
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 5
          periodSeconds: 15
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: jaeger-config
          mountPath: /etc/jaeger
          readOnly: true
      volumes:
      - name: jaeger-config
        configMap:
          name: jaeger-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-config
  namespace: monitoring
  labels:
    app: jaeger
data:
  sampling_strategies.json: |
    {
      "service_strategies": [
        {
          "service": "wearforce-clean-crm",
          "type": "probabilistic",
          "param": 1.0,
          "max_traces_per_second": 100,
          "operation_strategies": [
            {
              "operation": "/health",
              "type": "probabilistic",
              "param": 0.1
            },
            {
              "operation": "/metrics",
              "type": "probabilistic",
              "param": 0.1
            }
          ]
        },
        {
          "service": "wearforce-clean-erp",
          "type": "probabilistic",
          "param": 1.0,
          "max_traces_per_second": 100
        },
        {
          "service": "wearforce-clean-notification",
          "type": "probabilistic",
          "param": 1.0,
          "max_traces_per_second": 100
        },
        {
          "service": "wearforce-clean-graphql",
          "type": "probabilistic",
          "param": 1.0,
          "max_traces_per_second": 200
        }
      ],
      "default_strategy": {
        "type": "probabilistic",
        "param": 0.1,
        "max_traces_per_second": 50
      },
      "per_operation_strategies": [
        {
          "operation": "GET /health",
          "type": "probabilistic",
          "param": 0.05
        },
        {
          "operation": "GET /metrics",
          "type": "probabilistic",
          "param": 0.05
        },
        {
          "operation": "business.*",
          "type": "probabilistic",
          "param": 1.0
        }
      ]
    }
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: monitoring
  labels:
    app: jaeger
    component: query
spec:
  type: ClusterIP
  ports:
  - name: query-http
    port: 16686
    protocol: TCP
    targetPort: 16686
  selector:
    app: jaeger
    component: all-in-one
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: monitoring
  labels:
    app: jaeger
    component: collector
spec:
  type: ClusterIP
  ports:
  - name: jaeger-collector-tchannel
    port: 14267
    protocol: TCP
    targetPort: 14267
  - name: jaeger-collector-http
    port: 14268
    protocol: TCP
    targetPort: 14268
  - name: jaeger-collector-grpc
    port: 14250
    protocol: TCP
    targetPort: 14250
  - name: jaeger-collector-zipkin
    port: 9411
    protocol: TCP
    targetPort: 9411
  - name: otlp-grpc
    port: 4317
    protocol: TCP
    targetPort: 4317
  - name: otlp-http
    port: 4318
    protocol: TCP
    targetPort: 4318
  selector:
    app: jaeger
    component: all-in-one
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-agent
  namespace: monitoring
  labels:
    app: jaeger
    component: agent
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: agent-zipkin-thrift
    port: 5775
    protocol: UDP
    targetPort: 5775
  - name: agent-compact
    port: 6831
    protocol: UDP
    targetPort: 6831
  - name: agent-binary
    port: 6832
    protocol: UDP
    targetPort: 6832
  - name: agent-configs
    port: 5778
    protocol: TCP
    targetPort: 5778
  selector:
    app: jaeger
    component: all-in-one
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jaeger-query
  namespace: monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: jaeger-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Jaeger'
spec:
  tls:
  - hosts:
    - jaeger.wearforce-clean.com
    secretName: jaeger-tls
  rules:
  - host: jaeger.wearforce-clean.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jaeger-query
            port:
              number: 16686
---
apiVersion: v1
kind: Secret
metadata:
  name: jaeger-basic-auth
  namespace: monitoring
type: Opaque
data:
  auth: YWRtaW46JGFwcjEkSDY1dnB4NEkkMzNNOWg2a1M4Wm1ya3lkZFguLwo= # admin:admin